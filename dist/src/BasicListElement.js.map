{"version":3,"file":"BasicListElement.js","sourceRoot":"","sources":["../../src/BasicListElement.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  html,\n  css,\n  LitElement,\n  property,\n  internalProperty,\n  CSSResult,\n  TemplateResult,\n} from 'lit-element';\nimport { SelectionEvent } from './SelectionEvent.js';\nimport { resetBoxes } from './reset-styles.js';\nimport { ReadOnlyArray } from '../lib/ReadOnlyArray.js';\n\n/**\n * BasicListElement - web component based on LitElement class\n * that takes LightDOM children and adds them as selectable options\n * to list, maintained in ShadowDOM, tracks their selection status in\n * single and multiple select modes\n *\n * @export\n * @class BasicListElement\n * @extends {LitElement}\n *\n * @field label - descriptive label for items in the list\n * @type {String}\n * @default \"\"\n *\n * @field name - short name of the variable to hold the selection result\n * @type {String}\n * @default \"\"\n *\n * @field multiple - multiple selection mode\n * @type {Boolean}\n * @default false\n *\n * @field defaultSelectionIndex - indexes of items, selected by default\n * @attribute: 'default-selection-index'\n * @type {number[]}\n * @default []\n *\n * @readonly\n * @field selected - those of retrieved via LightDOM elements,\n *                   which are selected\n * @type {Element[]}\n *\n * @readonly\n * @field selectedIndexes - the same as previous, but indexes\n * @type {number[]}\n *\n */\nexport class BasicListElement extends LitElement {\n  /**\n   * ShadowDOM styles define custom style parameters:\n   *\n   * @param ```--ble-main-color```\n   * @default '#777'\n   *\n   * @param ```--ble-secondary-color```\n   * @default '#f9f9f9'\n   *\n   * @param ```--ble-bg-color```\n   * @default 'transparent'\n   *\n   * @param ```--ble-text-color```\n   * @default ---ble-main-color\n   *\n   * @param ```--ble-border-color```\n   * @default ---ble-main-color\n   *\n   * @param ```--ble-selection-color```\n   * @default '#00ccff'\n   *\n   * @param ```--ble-focus-color```\n   * @default '#c5f3ff'\n   *\n   * @readonly\n   * @static\n   * @type {CSSResult[]}\n   * @memberof BasicListElement\n   */\n  static get styles(): CSSResult[] {\n    return [\n      resetBoxes,\n      css`\n        :host {\n          --ble-main-color: #777;\n          --ble-secondary-color: #f9f9f9;\n          --ble-bg-color: transparent;\n          --ble-text-color: var(--ble-main-color);\n          --ble-border-color: var(--ble-main-color);\n          --ble-selection-color: #00ccff;\n          --ble-focus-color: #c5f3ff;\n          display: block;\n          color: var(--ble-text-color);\n          position: relative;\n          background-color: var(--ble-bg-color);\n        }\n\n        .list {\n          /* display: grid;\n          grid-template-areas: 'ul'; */\n          margin: 0.3em;\n          padding: 0;\n          width: 100%;\n          /* border: 1px solid var(--ble-border-color); */\n          /* font-size: 1.25rem; */\n          cursor: pointer;\n          line-height: 1.1;\n          background-color: var(--ble-secondary-color);\n          /* align-items: center; */\n          list-style-type: none;\n        }\n\n        .item {\n          display: block;\n          padding: 0.5em 1em;\n        }\n\n        .item:focus,\n        .item:hover {\n          outline: none;\n          background-color: var(--ble-focus-color);\n        }\n\n        .item[selected] {\n          font-weight: bold;\n          background-color: var(--ble-selection-color);\n        }\n      `,\n    ];\n  }\n\n  @property({ type: String })\n  label = '';\n\n  @property({ type: String })\n  name = '';\n\n  @property({ type: Boolean })\n  multiple = false;\n\n  @property({ type: Array, attribute: 'default-selection-index' })\n  defaultSelectionIndex: number[] = [];\n\n  get selected(): Element[] {\n    return this.selectedIndexes.map(i => this.items[i]);\n  }\n\n  get selectedIndexes(): number[] {\n    return Array.from(this.__selectedIndexes);\n  }\n\n  private get slotChildren(): Element[] {\n    const slot = this.shadowRoot?.querySelector<HTMLSlotElement>('slot');\n    return slot ? slot.assignedElements() : [];\n  }\n\n  @property({ type: Array })\n  items: ReadOnlyArray<Element> = [];\n\n  @internalProperty()\n  private __selectedIndexes: Set<number> = new Set();\n\n  private selectItem(itemIndex: number) {\n    if (!this.multiple) this.__selectedIndexes = new Set();\n    this.__selectedIndexes.add(itemIndex);\n    this.requestUpdate('selectedIndexes');\n  }\n\n  private deselectItem(itemIndex: number) {\n    this.__selectedIndexes.delete(itemIndex);\n    this.requestUpdate('selectedIndexes');\n  }\n\n  private toggleItemSelection(index: number) {\n    if (this.__selectedIndexes.has(index)) {\n      this.deselectItem(index);\n    } else {\n      this.selectItem(index);\n    }\n  }\n\n  updated(props: Map<keyof BasicListElement, unknown>): void {\n    if (props.has('selectedIndexes')) {\n      this.dispatchEvent(\n        new SelectionEvent({\n          index: this.selectedIndexes,\n          items: this.selected,\n        })\n      );\n    }\n    if (props.has('defaultSelectionIndex')) {\n      this.__selectedIndexes = new Set();\n      this.defaultSelectionIndex.forEach(i => this.selectItem(i));\n    }\n  }\n\n  render(): TemplateResult {\n    return html`\n      <div id=\"listlabel\" class=\"label\">${this.label}</div>\n      <ul\n        class=\"list\"\n        title=\"options list\"\n        aria-labelledby=\"listlabel\"\n        role=\"listbox\"\n        aria-multiselectable=\"${this.multiple}\"\n      >\n        ${this.items.map(\n          (item, index) =>\n            html`\n              <li\n                role=\"option\"\n                class=\"item\"\n                tabindex=\"0\"\n                data-index=\"${index}\"\n                @click=\"${() => {\n                  this.toggleItemSelection(index);\n                }}\"\n                @keydown=\"${(e: KeyboardEvent) => {\n                  const element: HTMLElement | null = e.target as HTMLElement;\n                  if (!element) return;\n                  if (e.key === ' ') {\n                    this.toggleItemSelection(index);\n                  }\n                  if (e.key === 'Enter') {\n                    this.selectItem(index);\n                  }\n                  if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {\n                    this.items[\n                      (index + 1) % this.items.length\n                    ].parentElement?.focus();\n                  }\n                  if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {\n                    const l = this.items.length;\n                    this.items[(l + index - 1) % l].parentElement?.focus();\n                  }\n                }}\"\n                aria-selected=\"${this.__selectedIndexes.has(index)}\"\n                ?selected=\"${this.__selectedIndexes.has(index)}\"\n              >\n                ${item}\n              </li>\n            `\n        )}\n      </ul>\n      <slot\n        @slotchange=\"${() => {\n          const children = this.slotChildren;\n          if (children && children.length) {\n            // Populate items from light DOM\n            this.items = new ReadOnlyArray(Array.from(children));\n            // clear selection\n            this.__selectedIndexes = new Set();\n            // Select the defaults\n            this.defaultSelectionIndex.forEach(i => this.selectItem(i));\n          }\n        }}\"\n      ></slot>\n    `;\n  }\n}\n"]}
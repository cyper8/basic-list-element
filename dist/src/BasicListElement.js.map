{"version":3,"file":"BasicListElement.js","sourceRoot":"","sources":["../../src/BasicListElement.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, css, LitElement, CSSResult, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { SelectionChangedEvent } from './SelectionChangedEvent.js';\nimport { resetBoxes } from './reset-boxes-style.js';\nimport { BLEStyle } from './ble-style.js';\nimport { ReadOnlyArray } from '../lib/ReadOnlyArray.js';\nimport { ItemsChangedEvent } from './ItemsChangedEvent.js';\n\nvar bypass = false;\n\n/**\n * BasicListElement - web component based on LitElement class\n * that takes LightDOM children and adds them as selectable options\n * to list, maintained in ShadowDOM, tracks their selection status in\n * single and multiple select modes\n *\n * @export\n * @class BasicListElement\n * @extends {LitElement}\n *\n * @field label - descriptive label for items in the list\n * @type {String}\n * @default \"\"\n *\n * @field name - short name of the variable to hold the selection result\n * @type {String}\n * @default \"\"\n *\n * @field multiple - multiple selection mode\n * @type {Boolean}\n * @default false\n * \n * @field disabled - disable selection function and relevant styling\n * @type {Boolean}\n * @default false\n *\n * @readonly\n * @field items - immutable array of elements rendered into list items\n * @type {Element[]}\n *\n * @readonly\n * @field selected - those of retrieved via LightDOM elements,\n *                   which are selected\n * @type {Element[]}\n *\n * @field selectedIndexes - sets or gets index of currently selected items\n * @type {number[]}\n *\n */\nexport class BasicListElement extends LitElement {\n  /**\n   * ShadowDOM styles define custom style parameters:\n   *\n   * @param ```--ble-main-color```\n   * @default '#555'\n   *\n   * @param ```--ble-secondary-color```\n   * @default '#f9f9f9'\n   *\n   * @param ```--ble-selection-color```\n   * @default '#00ccff'\n   *\n   * @param ```--ble-focus-color```\n   * @default '#c5f3ff'\n   *\n   * @param ```--ble-background```\n   * @default 'transparent'\n   *\n   * @param ```--ble-text```\n   * @default '1rem serif var(--ble-main-color)'\n   *\n   * @param ```--ble-border```\n   * @default 'solid 0px var(--ble-main-color)'\n   *\n   * @param ```--ble-selected-background```\n   * @default 'transparent'\n   *\n   * @param ```--ble-selected-text```\n   * @default 'bold 1rem serif var(--ble-main-color)'\n   *\n   * @param ```--ble-selected-border```\n   * @default 'solid 0px var(--ble-selection-color)'\n   *\n   * @param ```--ble-focus-text```\n   * @default 'var(--ble-text)'\n   *\n   * @param ```--ble-focus-background```\n   * @default 'var(--ble-focus-color)'\n   *\n   * @param ```--ble-focus-border```\n   * @default 'var(--ble-border)'\n   *\n   * @readonly\n   * @static\n   * @type {CSSResult[]}\n   * @memberof BasicListElement\n   */\n  static get styles(): CSSResult[] {\n    return [\n      resetBoxes,\n      css`\n        :host {\n          --ble-main-color: #555;\n          --ble-secondary-color: transparent;\n          --ble-selection-color: #00ccff;\n          --ble-focus-color: #c5f3ff;\n\n          --ble-background: var(--ble-secondary-color);\n          --ble-text: 1rem serif var(--ble-main-color);\n          --ble-border: none;\n\n          --ble-selected-background: var(--ble-selection-color);\n          --ble-selected-text: bold var(--ble-text);\n          --ble-selected-border: var(--ble-border);\n\n          --ble-focus-text: var(--ble-text);\n          --ble-focus-background: var(--ble-focus-color);\n          --ble-focus-border: var(--ble-border);\n          display: block;\n          position: relative;\n        }\n      `,\n      BLEStyle,\n    ];\n  }\n\n  @property({ type: String })\n  label = '';\n\n  @property({ type: String })\n  name = '';\n\n  @property({ type: Boolean })\n  multiple = false;\n\n  @property({ type: Boolean })\n  disabled: boolean = false;\n\n  @property({ attribute: false, noAccessor: true })\n  get selected(): Element[] {\n    return this.selectedIndexes.map(i => this.items[i]);\n  }\n\n  @property({ attribute: false, noAccessor: true })\n  set selectedIndexes(indexes: number[]) {\n    this.__selectedIndexes = new Set<number>(\n      !this.multiple ? indexes.slice(0, 1) : [...indexes]\n    );\n    this.requestUpdate('selectedIndexes');\n  }\n\n  get selectedIndexes(): number[] {\n    return Array.from(this.__selectedIndexes);\n  }\n\n  private get slotChildren(): Element[] {\n    const slot = this.shadowRoot?.querySelector<HTMLSlotElement>('slot');\n    return slot ? slot.assignedElements() : [];\n  }\n\n  @property({ type: Array })\n  items: ReadOnlyArray<Element> = [];\n\n  @state()\n  private __selectedIndexes: Set<number> = new Set();\n\n  private selectItem(itemIndex: number) {\n    if (!this.multiple) this.__selectedIndexes = new Set();\n    this.__selectedIndexes.add(itemIndex);\n    this.requestUpdate('selectedIndexes');\n  }\n\n  private deselectItem(itemIndex: number) {\n    this.__selectedIndexes.delete(itemIndex);\n    this.requestUpdate('selectedIndexes');\n  }\n\n  private toggleItemSelection(index: number) {\n    if (this.__selectedIndexes.has(index)) {\n      this.deselectItem(index);\n    } else {\n      this.selectItem(index);\n    }\n  }\n\n  updated(props: Map<keyof BasicListElement, unknown>): void {\n    if (props.has('selectedIndexes')) {\n      this.dispatchEvent(\n        new SelectionChangedEvent({\n          index: this.selectedIndexes,\n          elements: this.selected,\n        })\n      );\n    }\n    if (props.has('items')) {\n      this.dispatchEvent(new ItemsChangedEvent({ items: this.items }));\n    }\n  }\n\n  render(): TemplateResult {\n    return html`\n      <div id=\"listlabel\" class=\"label\">${this.label}</div>\n      <div\n        class=\"list\"\n        title=\"options list\"\n        aria-labelledby=\"listlabel\"\n        role=\"listbox\"\n        aria-multiselectable=\"${this.multiple}\"\n        aria-disabled=\"${this.disabled}\"\n        ?disabled=\"${this.disabled}\"\n      >\n        ${this.items.map(\n      (item, index, items) =>\n        html`\n              <div\n                role=\"option\"\n                class=\"item\"\n                tabindex=\"0\"\n                data-index=\"${index}\"\n                aria-disabled=\"${this.disabled}\"\n                ?disabled=\"${this.disabled}\"\n                @click=\"${(e: MouseEvent) => {\n            e.stopPropagation();\n            if (!this.disabled) this.toggleItemSelection(index);\n          }}\"\n                @keydown=\"${(e: KeyboardEvent) => {\n            e.stopPropagation();\n            if (!this.disabled) {\n              if (e.key === ' ') {\n                // Space Bar\n                this.toggleItemSelection(index);\n              }\n              if (e.key === 'Enter') {\n                this.selectItem(index);\n              }\n              if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {\n                items[(index + 1) % items.length].parentElement?.focus();\n              }\n              if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {\n                const l = items.length;\n                items[(l + index - 1) % l].parentElement?.focus();\n              }\n            }\n          }}\"\n                aria-selected=\"${this.__selectedIndexes.has(index)}\"\n                ?selected=\"${this.__selectedIndexes.has(index)}\"\n              >\n                ${item}\n              </div>\n            `\n    )}\n      </div>\n      <slot\n        @slotchange=\"${() => {\n        const children = this.slotChildren;\n        if (!bypass) { // update is triggered by light dom children transfer to shadow\n          // Populate items from light DOM\n          if (this.items.length) {\n            if (this.__selectedIndexes.size) {\n              this.__selectedIndexes = new Set();\n            }\n          }\n          this.items = new ReadOnlyArray(Array.from(children));\n          bypass = true; // bypass next update which happens because slot children are moved to shadow root\n        } else {\n          bypass = false; // return to normal operation after items are moved\n        }\n      }}\"\n      ></slot>\n    `;\n  }\n}\n"]}